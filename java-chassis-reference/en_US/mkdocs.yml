site_name: ServiceComb Java Chassis Developers Guide

nav:
- Introduction : index.md
- Getting Started: 
    - Glossary: start/terminology.md
    - Architecture: start/architecture.md
    - Development environment: start/development-environment.md
    - Develop the first microservice: start/first-sample.md
- Development Service Provider: 
    - Service definition: build-provider/definition/service-definition.md
    - Service contract definition: build-provider/define-contract.md
    - Implicit API definition: build-provider/code-first.md
    - Use Swagger annotations: build-provider/swagger-annotation.md
    - Develop with SpringMVC: build-provider/springmvc.md
    - Develop with JAX-RS: build-provider/jaxrs.md
    - Develop with Transparent RPC: build-provider/transparent-rpc.md
    - Interface definition and data type: build-provider/interface-constraints.md
    - Service listening address and publishing address: build-provider/listen-address-and-publish-address.md
    - Thread pool: build-provider/thread-pool.md
    - Service Configuration: 
        - Rate Limiting Policy: build-provider/configuration/ratelimite-strategy.md
        - Parameter Validator: build-provider/configuration/parameter-validator.md
    - Boot-up Process: build-provider/bootup.md
    - Access Log Configuration: build-provider/access-log-configuration.md
- Writing Service Consumer: 
    - Consumer common configuration: build-consumer/common-configuration.md
    - Using Rest Template: build-consumer/using-resttemplate.md
    - Using AsyncRestTemplate: build-consumer/using-AsyncRestTemplate.md
    - Using with RPC: build-consumer/develop-consumer-using-rpc.md
    - Contract: build-consumer/with-contract.md
    - Invoke control: 
        - Flow Control: build-consumer/flow-control.md
        - Fault Injection: build-consumer/fault-injection.md
    - Invoke 3rd-party REST services: build-consumer/3rd-party-service-invoke.md
- Transports: 
    - REST over Servlet: transports/rest-over-servlet.md
    - REST over Vertx: transports/rest-over-vertx.md
    - Highway: transports/highway-rpc.md
    - HTTP2: transports/http2.md
- General Development: 
    - Access Service Center: general-development/visit-sc.md
    - Metrics: general-development/metrics.md
    - Microservice invocation chain: general-development/microservice-invocation-chain.md
    - Customized-Tracing: general-development/customized-tracing.md
    - Local development and testing: general-development/local-develop-test.md
    - Http Filter: general-development/http-filter.md
    - File Uploading: general-development/file-upload.md
    - File Downloading: general-development/file-download.md
    - Reactive Programing: general-development/reactive.md
    - DNS Custom Configuration: general-development/dnsconfig.md
    - Proxy Settings: general-development/dai-li-she-zhi.md
    - Report framework version: general-development/report-framework-version.md
    - Cross-application invocation: general-development/cross-app-invocation.md
    - Customized serialization and deserialization: general-development/secret-field.md
    - Using Context to pass control messages: general-development/context.md
    - Return value serialization extension: general-development/produceprocess.md
    - CORS mechanism: general-development/CORS.md
    - Get fuse and instance isolation alarm event information: general-development/AlarmEvent.md
    - Shutdown gracefully: general-development/shutdown.md
    - Handling exceptions: general-development/error-handling.md
    - Multi-environment isolation between microservice instances: general-development/multienvironment.md
    - Thread Model: general-development/thread-model.md
- Configuration: 
    - General config: config/general-config.md
    - Configuration injection: config/inject-config.md
- Service Capability Open: 
    - Intruductions: edge/open-service.md
    - Using Edge Service: edge/by-servicecomb-sdk.md
    - Using confd and Nginx as edge services: edge/nginx.md
    - Use zuul as edge services: edge/zuul.md
- Service Packing and Running: 
    - Standalone mode: packaging/standalone.md
    - WEB container mode: packaging/web-container.md
- Micro Service Security: 
    - Using TLS: security/tls.md
    - Using RSA certification: security/rsa.md
- Using java chassis in Spring Boot: 
    - Intruductions: using-java-chassis-in-spring-boot/using-java-chassis-in-spring-boot.md
    - spring boot starter for java-chassis: using-java-chassis-in-spring-boot/components-for-spring-boot.md
    - JAVA application development: using-java-chassis-in-spring-boot/java-application.md
    - Web development method development: using-java-chassis-in-spring-boot/web-application.md
    - The difference between JAVA application method and Web development method: using-java-chassis-in-spring-boot/diff-between-java-web.md
    - The difference in Spring MVC mode: using-java-chassis-in-spring-boot/diff-spring-mvc.md
- Handlers reference: 
    - Intruductions: references-handlers/intruduction.md
    - Load Balancing: references-handlers/loadbalance.md
    - Public key authentication: references-handlers/publickey.md
- FAQ: 
    - 'Q & A' : question-and-answer/question_answer.md
    - 'FAQ' : question-and-answer/faq.md
    - Micro Service Interface Compatibility FAQ: question-and-answer/interface-compatibility.md

theme: material
plugins:
    - search
